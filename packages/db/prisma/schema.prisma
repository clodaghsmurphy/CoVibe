generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Log {
  id      Int    @id @default(autoincrement())
  level   Level
  message String
  meta    Json
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  password   String
  name       String
  refreshTokens RefreshToken[]
  households Household[] @relation("HouseholdMembers")
}

model Household {
  id           String         @id @default(cuid())
  name         String
  groceries    Grocery[]
  members      User[]         @relation("HouseholdMembers")
  ShoppingList ShoppingList[]
}

model Grocery {
  id                String             @id @default(cuid())
  name              String
  category          String
  purchaseFrequency Frequency
  householdId       String
  household         Household          @relation(fields: [householdId], references: [id])
  priceRecords      PriceRecord[]
  link              String?
  ShoppingListItem  ShoppingListItem[]
}

model PriceRecord {
  id        String   @id @default(cuid())
  groceryId String
  price     Float
  date      DateTime @default(now())
  store     String?
  grocery   Grocery  @relation(fields: [groceryId], references: [id])
}

enum Level {
  Info
  Warn
  Error
}

enum Frequency {
  MONTHLY
  QUARTERLY
  ANNUALLY
  ONE_TIME
}

model ShoppingList {
  id          String             @id @default(cuid())
  month       DateTime // The month this shopping list corresponds to
  householdId String
  household   Household          @relation(fields: [householdId], references: [id])
  items       ShoppingListItem[]
  status      ShoppingListStatus @default(PENDING)
  createdAt   DateTime           @default(now())
  orderedAt   DateTime?
}

enum ShoppingListStatus {
  PENDING
  COMPLETED
}

model ShoppingListItem {
  id             String       @id @default(cuid())
  shoppingListId String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  groceryId      String
  grocery        Grocery      @relation(fields: [groceryId], references: [id])
  quantity       Int // Number of this grocery item to buy
  notes          String? // Optional notes for the item
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  isRevoked   Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}
